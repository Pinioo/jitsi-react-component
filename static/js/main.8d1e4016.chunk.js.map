{"version":3,"sources":["VideoConference.js","App.js","reportWebVitals.js","index.js"],"names":["VideoConference","props","jitsiContainerId","React","useState","jitsi","setJitsi","loadJitsiAPI","resolver","onloadPromise","Promise","resolve","script","document","createElement","src","async","onload","body","appendChild","initJitsi","a","createJistiMeet","window","JitsiMeetExternalAPI","roomName","userInfo","displayName","configOverwrite","hideConferenceSubject","enableNoisyMicDetection","prejoinPageEnabled","parentNode","getElementById","useEffect","dispose","id","style","height","width","App","setDisplayName","setRoomName","tmpDisplayName","setTmpDisplayName","tmpRoomName","setTmpRoomName","onSubmit","event","preventDefault","type","name","onChange","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0NAuDeA,EArDS,SAACC,GACvB,IAAMC,EAAmB,qBACzB,EAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,WACnB,IAAIC,EAAW,KAETC,EAAgB,IAAIC,SAAQ,SAACC,GACjCH,EAAWG,KAGPC,EAASC,SAASC,cAAc,UAKtC,OAJAF,EAAOG,IAAM,sCACbH,EAAOI,OAAQ,EACfJ,EAAOK,OAAS,kBAAMT,KACtBK,SAASK,KAAKC,YAAYP,GACnBH,GAGHW,EAAS,uCAAG,sBAAAC,EAAA,sEACVd,IADU,OAEhBD,EAASgB,KAFO,2CAAH,qDAKTA,EAAkB,WACtB,OAAO,IAAIC,OAAOC,qBAAqB,cAAe,CACpDC,SAAUxB,EAAMwB,SAChBC,SAAU,CACRC,YAAa1B,EAAM0B,aAErBC,gBAAiB,CACfC,uBAAuB,EACvBC,yBAAyB,EACzBC,oBAAoB,GAQtBC,WAAYnB,SAASoB,eAAe/B,MASxC,OALAC,IAAM+B,WAAU,WAEd,OADAd,IACO,+BAAMf,QAAN,IAAMA,GAAN,UAAMA,EAAO8B,eAAb,aAAM,OAAA9B,MACZ,IAEI,qBAAK+B,GAAIlC,EAAkBmC,MAAO,CAAEC,OAAO,IAAKC,MAAO,UCdjDC,EAnCH,WACV,MAAsCrC,IAAMC,SAAS,IAArD,mBAAOuB,EAAP,KAAoBc,EAApB,KACA,EAAgCtC,IAAMC,SAAS,IAA/C,mBAAOqB,EAAP,KAAiBiB,EAAjB,KAEA,EAA4CvC,IAAMC,SAAS,IAA3D,mBAAOuC,EAAP,KAAuBC,EAAvB,KACA,EAAsCzC,IAAMC,SAAS,IAArD,mBAAOyC,EAAP,KAAoBC,EAApB,KAgBA,MAAmB,KAAhBnB,GAAmC,KAAbF,EAChB,cAAC,EAAD,CAAiBE,YAAaA,EAAaF,SAAUA,IAErD,uBAAMsB,SAjBM,SAACC,GACpBP,EAAeE,GACfD,EAAYG,GACZG,EAAMC,kBAcC,UACL,mDACgB,uBAAOC,KAAK,OAAOC,KAAK,cAAcC,SAT9B,SAACJ,GAC3BJ,EAAkBI,EAAMK,OAAOC,aASrB,uBACR,gDACa,uBAAOJ,KAAK,OAAOC,KAAK,WAAWC,SAhB3B,SAACJ,GACxBF,EAAeE,EAAMK,OAAOC,aAgBlB,uBACR,uBAAOJ,KAAK,SAASI,MAAM,aCtBlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASoB,eAAe,SAM1BsB,M","file":"static/js/main.8d1e4016.chunk.js","sourcesContent":["import React from \"react\"\n\nconst VideoConference = (props) => {\n  const jitsiContainerId = \"jitsi-container-id\"\n  const [jitsi, setJitsi] = React.useState({})\n\n  const loadJitsiAPI = () => {\n    let resolver = null;\n\n    const onloadPromise = new Promise((resolve) => {\n      resolver = resolve;\n    });\n  \n    const script = document.createElement(\"script\")\n    script.src = \"https://meet.jit.si/external_api.js\"\n    script.async = true\n    script.onload = () => resolver()\n    document.body.appendChild(script)\n    return onloadPromise\n  }\n\n  const initJitsi = async () => {\n    await loadJitsiAPI()\n    setJitsi(createJistiMeet())\n  }\n\n  const createJistiMeet = () => {\n    return new window.JitsiMeetExternalAPI(\"meet.jit.si\", {\n      roomName: props.roomName,\n      userInfo: {\n        displayName: props.displayName\n      },\n      configOverwrite: {\n        hideConferenceSubject: true,\n        enableNoisyMicDetection: false,\n        prejoinPageEnabled: false\n      },\n      // interfaceConfigOverwrite: {\n      //   TOOLBAR_BUTTONS: [\n      //       'microphone', 'camera', 'chat', 'settings'\n      //   ],\n      //   TOOLBAR_ALWAYS_VISIBLE: false\n      // },\n      parentNode: document.getElementById(jitsiContainerId)\n    })\n  }\n  \n  React.useEffect(() => {\n    initJitsi()\n    return () => jitsi?.dispose?.()\n  }, [])\n\n  return <div id={jitsiContainerId} style={{ height:720, width: \"40%\" }} />\n}\n\nexport default VideoConference\n","import React from \"react\";\nimport VideoConference from \"./VideoConference\";\n\nconst App = () => {\n  const [displayName, setDisplayName] = React.useState('')\n  const [roomName, setRoomName] = React.useState('')\n\n  const [tmpDisplayName, setTmpDisplayName] = React.useState('')\n  const [tmpRoomName, setTmpRoomName] = React.useState('')\n\n  const handleSubmit = (event) => {\n    setDisplayName(tmpDisplayName)\n    setRoomName(tmpRoomName)\n    event.preventDefault()\n  }\n\n  const handleRoomChange = (event) => {\n    setTmpRoomName(event.target.value)\n  }\n\n  const handleDisplayChange = (event) => {\n    setTmpDisplayName(event.target.value)\n  }\n\n  if(displayName !== '' && roomName !== '') \n    return <VideoConference displayName={displayName} roomName={roomName}/>\n  else\n    return <form onSubmit={handleSubmit}>\n      <label>\n        Display name: <input type=\"text\" name=\"displayName\" onChange={handleDisplayChange} />\n      </label><br />\n      <label>\n        Room name: <input type=\"text\" name=\"roomName\" onChange={handleRoomChange} />\n      </label><br />\n      <input type=\"submit\" value=\"Join\" />\n    </form>\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}