{"version":3,"sources":["VideoConference.js","App.js","reportWebVitals.js","index.js"],"names":["VideoConference","props","userInfo","jitsiContainerId","React","useState","jitsi","setJitsi","loadJitsiAPI","resolver","onloadPromise","Promise","resolve","script","document","createElement","src","async","onload","body","appendChild","initJitsi","a","createJistiMeet","interfaceOverwrite","adminRole","TOOLBAR_ALWAYS_VISIBLE","TOOLBAR_BUTTONS","window","JitsiMeetExternalAPI","roomName","displayName","configOverwrite","hideConferenceSubject","enableNoisyMicDetection","prejoinPageEnabled","interfaceConfigOverwrite","parentNode","getElementById","useEffect","dispose","id","style","height","width","App","tmpUserInfo","setTmpUserInfo","setUserInfo","handleChange","event","target","console","log","type","name","checked","value","onSubmit","preventDefault","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wOA4DeA,EA1DS,SAACC,GACvB,IAAMC,EAAWD,EAAMC,SACjBC,EAAmB,qBACzB,EAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,WACnB,IAAIC,EAAW,KAETC,EAAgB,IAAIC,SAAQ,SAACC,GACjCH,EAAWG,KAGPC,EAASC,SAASC,cAAc,UAKtC,OAJAF,EAAOG,IAAM,sCACbH,EAAOI,OAAQ,EACfJ,EAAOK,OAAS,kBAAMT,KACtBK,SAASK,KAAKC,YAAYP,GACnBH,GAGHW,EAAS,uCAAG,sBAAAC,EAAA,sEACVd,IADU,OAEhBD,EAASgB,KAFO,2CAAH,qDAKTC,GAA4C,IAAvBtB,EAASuB,UAAqB,CACrDC,wBAAwB,GACxB,CACAC,gBAAiB,CACb,aAAc,SAAU,OAAQ,YAEpCD,wBAAwB,GAGtBH,EAAkB,WACtB,OAAO,IAAIK,OAAOC,qBAAqB,cAAe,CACpDC,SAAU5B,EAAS4B,SACnB5B,SAAU,CACR6B,YAAa7B,EAAS6B,aAExBC,gBAAiB,CACfC,uBAAuB,EACvBC,yBAAyB,EACzBC,oBAAoB,GAEtBC,yBAA0BZ,EAC1Ba,WAAYvB,SAASwB,eAAenC,MASxC,OALAC,IAAMmC,WAAU,WAEd,OADAlB,IACO,+BAAMf,QAAN,IAAMA,GAAN,UAAMA,EAAOkC,eAAb,aAAM,OAAAlC,MACZ,IAEI,qBAAKmC,GAAItC,EAAkBuC,MAAO,CAAEC,OAAO,IAAKC,MAAO,WCdjDC,EAxCH,WACV,MAAsCzC,IAAMC,SAAS,CACnD0B,YAAa,GACbD,SAAU,GACVL,WAAW,IAHb,mBAAOqB,EAAP,KAAoBC,EAApB,KAMA,EAAgC3C,IAAMC,SAAS,MAA/C,mBAAOH,EAAP,KAAiB8C,EAAjB,KAEMC,EAAe,SAACC,GACpB,IAAMC,EAASD,EAAMC,OACrBC,QAAQC,IAAIF,GACO,aAAhBA,EAAOG,KACRP,EAAe,2BAAKD,GAAN,kBAAoBK,EAAOI,KAAOJ,EAAOK,WAEvDT,EAAe,2BAAKD,GAAN,kBAAoBK,EAAOI,KAAOJ,EAAOM,UAQ3D,OAAGvD,EACM,cAAC,EAAD,CAAiBA,SAAUA,IAE3B,uBAAMwD,SARM,SAACR,GACpBF,EAAYF,GACZI,EAAMS,kBAMC,UACL,mDACgB,uBAAOL,KAAK,OAAOC,KAAK,cAAcK,SAAUX,OACxD,uBACR,gDACa,uBAAOK,KAAK,OAAOC,KAAK,WAAWK,SAAUX,OAClD,uBACR,qDACkB,uBAAOK,KAAK,WAAWC,KAAK,YAAYK,SAAUX,OAC5D,uBACR,uBAAOK,KAAK,SAASG,MAAM,aC3BlBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1D,SAASwB,eAAe,SAM1BuB,M","file":"static/js/main.c3efaced.chunk.js","sourcesContent":["import React from \"react\"\n\nconst VideoConference = (props) => {\n  const userInfo = props.userInfo\n  const jitsiContainerId = \"jitsi-container-id\"\n  const [jitsi, setJitsi] = React.useState({})\n\n  const loadJitsiAPI = () => {\n    let resolver = null;\n\n    const onloadPromise = new Promise((resolve) => {\n      resolver = resolve;\n    });\n  \n    const script = document.createElement(\"script\")\n    script.src = \"https://meet.jit.si/external_api.js\"\n    script.async = true\n    script.onload = () => resolver()\n    document.body.appendChild(script)\n    return onloadPromise\n  }\n\n  const initJitsi = async () => {\n    await loadJitsiAPI()\n    setJitsi(createJistiMeet())\n  }\n\n  const interfaceOverwrite = userInfo.adminRole === true ? {\n      TOOLBAR_ALWAYS_VISIBLE: false\n    }:{\n      TOOLBAR_BUTTONS: [\n          'microphone', 'camera', 'chat', 'settings'\n      ],\n      TOOLBAR_ALWAYS_VISIBLE: false\n    }\n\n  const createJistiMeet = () => {\n    return new window.JitsiMeetExternalAPI(\"meet.jit.si\", {\n      roomName: userInfo.roomName,\n      userInfo: {\n        displayName: userInfo.displayName\n      },\n      configOverwrite: {\n        hideConferenceSubject: true,\n        enableNoisyMicDetection: false,\n        prejoinPageEnabled: false\n      },\n      interfaceConfigOverwrite: interfaceOverwrite,\n      parentNode: document.getElementById(jitsiContainerId)\n    })\n  }\n  \n  React.useEffect(() => {\n    initJitsi()\n    return () => jitsi?.dispose?.()\n  }, [])\n\n  return <div id={jitsiContainerId} style={{ height:720, width: \"100%\" }} />\n}\n\nexport default VideoConference\n","import React from \"react\";\nimport VideoConference from \"./VideoConference\";\n\nconst App = () => {\n  const [tmpUserInfo, setTmpUserInfo] = React.useState({\n    displayName: \"\",\n    roomName: \"\",\n    adminRole: false,\n  })\n\n  const [userInfo, setUserInfo] = React.useState(null)\n\n  const handleChange = (event) => {\n    const target = event.target\n    console.log(target)\n    if(target.type === \"checkbox\")\n      setTmpUserInfo({ ...tmpUserInfo, [target.name]: target.checked});\n    else\n      setTmpUserInfo({ ...tmpUserInfo, [target.name]: target.value});\n  }\n\n  const handleSubmit = (event) => {\n    setUserInfo(tmpUserInfo)\n    event.preventDefault()\n  }\n\n  if(userInfo) \n    return <VideoConference userInfo={userInfo}/>\n  else\n    return <form onSubmit={handleSubmit}>\n      <label>\n        Display name: <input type=\"text\" name=\"displayName\" onChange={handleChange} />\n      </label><br />\n      <label>\n        Room name: <input type=\"text\" name=\"roomName\" onChange={handleChange} />\n      </label><br />\n      <label>\n        Are you admin?: <input type=\"checkbox\" name=\"adminRole\" onChange={handleChange} />\n      </label><br />\n      <input type=\"submit\" value=\"Join\" />\n    </form>\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}